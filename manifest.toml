#:schema https://raw.githubusercontent.com/YunoHost/apps/master/schemas/manifest.v2.schema.json

packaging_format = 2

id = "mollysocket"
name = "Mollysocket"
description.en = "Server for unified push support in Molly chat application"
description.fr = "Serveur pour le support de unified push dans lâ€™application de discussions Molly"

version = "1.5.2~ynh1"

maintainers = ["mcmic"]

[upstream]
# NB: Only the "license" key is mandatory. Remove entries for which there's no relevant data
license = "AGPL-3.0-or-later" # you can see the available licenses identifiers list here: https://spdx.org/licenses/
website = "https://molly.im/"
#demo = "https://demo.example.com"
admindoc = "https://github.com/mollyim/mollysocket/blob/main/README.md"
#userdoc = "https://yunohost.org/apps"
code = "https://github.com/mollyim/mollysocket"

fund = "https://opencollective.com/mollyim"

[integration]
yunohost = ">= 12.0.6"
helpers_version = "2.1"
architectures = ["amd64","armhf","arm64"]
multi_instance = true

# Not to confuse with the "sso" key: the "ldap" key corresponds to wether or not a user *can* login on the app using
# its YunoHost credentials.
ldap = "not_relevant"

# Not to confuse with the "ldap" key: the "sso" key corresponds to wether or not a user is *automatically logged-in*
# on the app when logged-in on the YunoHost portal.
sso = "not_relevant"

disk = "50M"
ram.build = "50M"
ram.runtime = "50M"

[install]
    [install.domain]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "domain"

[resources]
    # See the packaging documentation for the full set
    # of explanation regarding the behavior and properties for each of those

    [resources.sources]

    [resources.sources.main]
    # This will pre-fetch the asset which can then be deployed during the install/upgrade scripts with :
    #    ynh_setup_source --dest_dir="$install_dir"
    # You can also define other assets than "main" and add --source_id="foobar" in the previous command
    amd64.url = "https://github.com/mollyim/mollysocket/releases/download/1.5.2/mollysocket-linux_amd64"
    amd64.sha256 = "e69b7b95f0e02c4d8da0e9ae376f843f070f99751955edd26942c262799fd7d0"
    arm64.url = "https://github.com/mollyim/mollysocket/releases/download/1.5.2/mollysocket-linux_arm64"
    arm64.sha256 = "323b11767fc796833e124015397879345f604e94f7d600cb69c164f01d52a6d6"
    armhf.url = "https://github.com/mollyim/mollysocket/releases/download/1.5.2/mollysocket-linux_arm_v7"
    armhf.sha256 = "9f9dde619d27b7896da61240ce79107d29c5114407228eb03a0335c74a78468a"
    rename = "ms"

    # These infos are used by https://github.com/YunoHost/apps/blob/master/tools/autoupdate_app_sources/autoupdate_app_sources.py
    # to auto-update the previous asset urls and sha256sum + manifest version
    # assuming the upstream's code repo is on github and relies on tags or releases
    # See the 'sources' resource documentation for more details

    # autoupdate.strategy = "latest_github_tag"
    autoupdate.strategy = "latest_github_release"
    autoupdate.asset.amd64 = "mollysocket-linux-amd64"
    autoupdate.asset.arm64 = "mollysocket-linux-arm64"
    autoupdate.asset.armhf = "mollysocket-linux-armv7"

    [resources.system_user]
    # This will provision/deprovision a unix system user

    [resources.install_dir]
    # This will create/remove the install dir as /var/www/$app
    # and store the corresponding setting $install_dir

    [resources.permissions]
    # This will configure SSOwat permission for $domain/$path/
    # The initial allowed group of user is configured via the init_main_permission question (public=visitors, private=all_users)
    main.url = "/"
    main.show_tile = false
    main.allowed = "visitors"

    [resources.ports]
    # This will pick a random port for reverse-proxying and store it as the $port setting

    [resources.apt]
    # This will automatically install/uninstall the following apt packages
    # and implicitly define the $phpversion setting as 8.0 (if phpX.Y-foobar dependencies are listed)
    packages = ""

    #[resources.database]
    # This will automatically provision/deprovison a MySQL DB and store the corresponding credentials in settings $db_user, $db_name, $db_pwd
    #type = "mysql"
